import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Run {
    public static void main(String[] args) {
        String code1 = "FKMNFOEHHNHKCIGKOFBCNCNIOEFEHJIAMGMMGDFONKALNBBMMFEEOFPBMKBBMBBM";
        String code2 = "FEBFCDMHHPHKCIGKOKFGAPAIOLFNHJIAMOBPBPFONMAMNBBMMMPHLNFBMNBDMBBM";
        String code3 = "MFOCNEGGHMBKMBBMMCOGEJJBMKBNMBBM";
        String code4 = "KNBGCMCKOHCNMJIADCLDNDOFHHJGAMHFHAJGFOKIOFANACHMKFEJNAPIKFCPMIKKAHBONLAAN" +
                "DHODIAODIHJHABHCLAMNADFNMPCLCKHCFIEKHADKCCGFBOAAAHGHHICAKKALNMGFMIGOFJHAGI" +
                "BIJGIOEOKNAANFBCIIMOFHFAGACGMMKMJEACHCGAANGEFMPEFPGBDDLIOOCEKCJEPAJLCMMOH" +
                "NIKOMEGGOCEAABJMAACNNHKOEKAGFGOKOHAHFEPAOBEGFMEAMPNDAPNKKGBJAMMAFKACCB" +
                "BDPOHIKEHEHEHMEDKKOAAANDCNPIBOFCNKGAFKCFAEAKMKKFKOJCMPDKIFOAIABHJCBPBONCHB" +
                "CONOMFNHJFDEMMJBAIEOOIGPHHJAAGOFNHOCCKCEMMPHHBJMAMKFOGPEJIEAAMDJDHOCCOE" +
                "EJIHHHEHFHIHONDJFOBNIKPFHHIOKHJLGDNDAAGCIMAHAMMIHEJCIKMCCMPEDDIEIKGHNOGOMO" +
                "PEJOMOPMCIIONHHDAIAAEMDDLJKCCAFAOJOKPLBFDMIOHCOKGIFOFJIKCNNBOEEMJIAAPEHKCBE" +
                "MAHKDJAEMKLNOFNHCBAINCCMACADCLBEMACLKEJMMLDAAEKIOJEFMACAFNHGFCDGFMHLCAGN" +
                "KHJPMPPEMDDCDICOKFMCPGJEMMCEMOINCIHPNCEDDKINKACAFABEPADHCDINKJGACOBMCPPAN" +
                "AADAFHHEKIDFJKANODPDAJNKHBHHDFAAENFOHICAMBEBMFKKHPMDEJMMMEDPNBIOOEFMACAF" +
                "CJDKHFGFHHHCAGNKDDHBCIEMHDJDICOKHPNOLOEMCCFMOINCBAPKLFDDDIEKACAFOECBOCHCBIL" +
                "KJGAAJMJOHCANJAAACAMDKKNDHDHHBIKKCPMJBOGAIAEMJNLOOPOAMHCICCEDNIJOHADKMHJN" +
                "EGOOIJAAICOMJPGNBOGFMIPKNEBDKFFFPNJALIOOEHMPHKHDGMAAPGHHKOBKAEGLDAAAKIGOAI" +
                "FKFKHJCDPDLIJOHICAMCELAMFHAAINJJADJLMMPNMFMKCCADAHCLKEDMHCHOCOHHHHBKPPMDI" +
                "OEHPCIFKAEDCKOFIKIOMNGANNGNEBPBFNNAPNNAOHDHCBGCCKIANNAHANDPNDGLIKBAFAIOKM" +
                "CMNIHCHCFOHONEBAKLJEMKJALIMOPAJAJKJMBPIOKAEAOJOKKMFNKPIOGCJKGIFODDEOAANBOED" +
                "MJIACFECAMPPJOANAOHNFBNBAFDOONHCHJMACCFCDHIKCBAOAFHHMBHEDAMANJNIBECMACED" +
                "FPDONFIFOKACHFABJPCDDDHCCOHOKEFJDFPHHIIMOHICACMCGJDFHLIDKOANAMHMOCECFDOHNIJ" +
                "KDCAHMGIGFNHPCIPKEABHJGBNFBJFAABNBKAIBPCAANGEHFKONMEJHOPAAOCMCHACAIONBPMA" +
                "FCAONJAEKDPLDJPCKLGIFIKKONMDHOAMFOAGAJIAAPLJKNDONFGEFIAKMPEMPMMJAFEHMACAFF" +
                "GOHMPHHEINOCMMMMCNIKOFHKAFNPHDEDGHHHMAAKHCCEOMMMDIJADANPPCDACNNBJLCM" +
                "FNFFAIAJAAMADENEEJAJENMCEMDFCFKAHJALINOEHMNDKNPLJAADOAONAOAHBFDDPHCEIGKFAH" +
                "MEBHKKOHHCILKACAEOIOJEPKCDINKNBOMMHIGCFEDBIJOHCDNAOCLDJBEPACAJAAHCMJNFEHHBH" +
                "HCAFNOFMPLHMPDKEOMJIAMCEJGGDBEPHHDALADMOEDPIHCOAPNADFAPLFAMJHCHIJKHADDLIM" +
                "BHBCMGGFFAPNCAFGHJMIOEJNADHDNNALHGPANNNAOCOMAFCGDMBIKIEMIJAEMPCCNMEONPIJ" +
                "KHCCLFKNGADOOAJGANDFKCFFEPDOELELMFCHKPEIKKKEMIJCAOINKLCLHHIFHDCIMOINEPEBONEEI" +
                "GJHEABAKCLGCFFCMNCGMOINECNCDPADLNOINIOOHENMFEOIOOJBAEFMIEBFEBACMJOKNIEKHLKP" +
                "CFIAACIOOAHAMCEEAEFHCMAPNNCBANFMFJMONDIHKEAIHIHMBJHDDLHJCOHOKBICNKAHHNIJOHI" +
                "CCNKFOIFFHOIAKOENOGPLLAJJEBADAINKKMOPNCNJAIIPKDIDOKCEGKADLENDOFOHCKEKICKKCCAIA" +
                "IKKFAJAMHJFHGAONGMFDEJEBDEFHEAONPEJOBPCOMFIOCKDCAOAKNKAOJENOPAJNHICAOOKEDM" +
                "FHGALACAMFBJMJHDCPHEIMPNDCMCOHKPPJLAIAHHHFPHDBIEIOONKBAGNCJLFEHPNFBABAHHHH" +
                "HHGJEAIKOGGFIFONPLHDCCJADIKOOANDBJAPIPAAOOPNAHAEGMFFFCIKOHICPJJMIMEIHGAAJHICA" +
                "CNAFJEILECKCPDDEJMAPHMIFCIOIGEFNAFAJKFGPEIODAEAOJOKMFPCBFIODCOKGIFFOEPHPBNBFIO" +
                "OGNFKHGFCICAACEMMDIDKAPNHNAAAOLNMEIOKDPDCHBCMJGGFICKAEOMKMBJACIHKDLLMENN" +
                "HLAHCIOMOCCMAALGBPNONJABNBAECPOMAOBIKBHBHEHMEPCJHDFANCCEPIBOOJKECFDAABINO" +
                "ANAOPLNJGCHCGOMODIDODJMHOBEMFEICAIAKGPKEDPAAHHLHHICKMHIMBJHCJMMFFIHCLKJOJB" +
                "HDHALACHCNFKCHCIIKDJNAGAFKHCOHHMAACHBHHICAONJEAMGFJIKOFJHALIIMDBIOHOENAANAB" +
                "OJCFFJAHAKNAJAKNBJKEJEMNCOMOINOAHMGMFPDINIFOINNFBHBBNKCMADAJAAHCAHAODHHNH" +
                "CCAFNOFKENCNPDOEGMJIAMPFIPEABEGKECACAMEOKNNFAAHHFHICKONGBCDKPDEEHMNOODOFI" +
                "DDMPJHEGDIHOFCFANDCAAAHNCAANOFCNJKHFHNIIOGIFOIDNGGKEMLHKDAOAKMJKKKCNOEAMN" +
                "HICAJLPBMEFHPAFAFAHKBMFKCLDDLPGDOKOAIBEGNKIOMJIAOAOFFLHMOCIOKAPAFMHKHKGGDG" +
                "KCHINKNIOAIEFKLHHDAAMAFAHAAJNAMKGFBMGFPADAJDENIBEMMDFDIAKKPMFHJHIKDCAMJIAILI" +
                "CNHCFHKJCAIEKOLIFHOPAAEDNDHOCCCEKBHGHHLHCHIHOOCABAALIKFFNHOINKJHAHFBAACFPHAI" +
                "ANFIPBINHHCEEMHACACMDAMAGFHIFOFJHDFLNDJDIKMENIADAOAGLFINPDCOKOKIKMHHBLNKJAN" +
                "EKMALAKGGJEOOHNNEHMPIDMBNGIKMHCEOBOCCMEONKOBEONKAINBJECFCDKFHAAAHHNEHM" +
                "MKACOBOPDDIHOJCAABJHEFJONKABNBAECIEPBFCIKOHFHEHMOEBOHFMANJCNPIIOPKENILNECKGF" +
                "NAFACCNCLNFANHOCNIKOMBPCFDDAAFHODACNKPNBEAAOEDGKFAKNAAOABBAIKCFPHJAEDPOBP" +
                "HPHCJAHNAHFADJEMCPANGKNCAANMHJFPPDIOOALAHECFFIBKFHAFCOIOPNDKPOEANLGFNAMNGI" +
                "FNBAELAJFHDJGEAOACANHEMJANDOCNIKOMFAEFKKAANNPOICKDKGFKKLGFCINODPDKJDMGAEIOP" +
                "AFAEIOBNFDFPEIKCHFCONOFJDJKJCEMAJAAJMAOEJGCGPEMGALACIMBIJICMFPDDMGFAMAFNOLFC" +
                "NIKMFKHEGMDFIFPGHCMGOENIDKKMLFEKPIKMAOAMIBAHDAPEGPJIANFAANKDGKMDGHHHIFKAIA" +
                "BMPBCMCONFHHCONOJNKILGCEMNJHAIPOOGIHGFCAAJIJOAOAFOBMGAEJAOIFOCGKAJLNGFCIKINF" +
                "BEJMNMOILDCIOFPCJAOAAMDFBNHHCNONOHJHDPAALCGMFGKHCADAHDHPONAHCOOHOHHHHI" +
                "GHPMJIODHDCIFKHHKMCPFIKPOHNAHAOONCCDDHCGIMKGIFNNHHPJBFHDJDAIOOAGMMHDMANF" +
                "JHEAJAACOAFIAEMDAFAAJFACOAOAMANBPADAANKCJADJAIOKCDMGIFABANEHCHCLIMOBAEABHG" +
                "BHBFHPINKEJMKAAPHDAJAEIJKDIDNHJBEJJAAHIHOCOMFDGKFJNOOACLMCGMAEPILMKFHFACNGA" +
                "NEABODDBFPLAONOJNANOEGAHAAJIMOAAFAEPILJADCAGHAAAJOIBJDKANOGIDOFIHANMFJBAAFAI" +
                "IOEAIFPEMECIHHJHICIGKOJPFBCIIOCFMHJIAAJELOOMONIAANJAEDFLMKFHHCMAINADFDFHAGIFHC" +
                "HIDKHPDFKIHMECEMNJCAJMACLAEBIOKCBAMAKHJKALEFAKANACJMJIACHJOGFKEIIAEAAHNICIMH" +
                "MNHDJIOOEEMCKADMDGAAJFAHADAAOKBMKJFOIKDBKABAFCCKHNDDGGNNJAEEFMNIBGCMPFGH" +
                "MOFKPHADPCEMFAJAHIHOIMCNCAPDDILKFIHKPNHBCBJAFMCFAKAAKNPJFFMFNPADIAOKMJIMAPO" +
                "OGJDAICOMPMIPDHGFJIBKNEBOGGIOCAJAEMOFAIAMCMCDKMAAEHAHPEDFHBELOJJAKEMMJMAO" +
                "FHDPFBAAAFEHAIAMMJFHPBGFMINKDEDMALPOLCAAIIJKHEHONMJLCGHCGAHNCIPKBJPJOCEIKAAA" +
                "HIHCOFEAFKAABIDKOHNABININKOOBNMBEJMMFHNPHPIOBPGJGBNMAENLHPBMLBOMBBM";
        String word = "противника";
        HashMap<Character, Character> pairs = new HashMap<>();
        pairs.put('0', 'A');
        pairs.put('1', 'B');
        pairs.put('2', 'C');
        pairs.put('3', 'D');
        pairs.put('4', 'E');
        pairs.put('5', 'F');
        pairs.put('6', 'G');
        pairs.put('7', 'H');
        pairs.put('8', 'I');
        pairs.put('9', 'J');
        pairs.put('A', 'K');
        pairs.put('B', 'L');
        pairs.put('C', 'M');
        pairs.put('D', 'N');
        pairs.put('E', 'O');
        pairs.put('F', 'P');

        String[] code1Split = code1.split("");
        String[] code2Split = code2.split("");
        String[] code3Split = code3.split("");
        String[] code4Split = code4.split("");
        String[] wordSplit = word.split("");

        ArrayList<String> hexs = new ArrayList<>();
        for (Character letter : word.toCharArray()) {
            int letter1 = letter;
            int shift = 0;
            if (letter1 > 1000) {
                shift = 848;
            }
            hexs.add(Integer.toHexString(letter1 - shift).toUpperCase());

        }
        System.out.println(hexs);

        ArrayList<String> letters = new ArrayList<>();
        for (String hex : hexs) {
            String[] hexSplit = hex.split("");
            letters.add("" + pairs.get(hexSplit[0].charAt(0)) + pairs.get(hexSplit[1].charAt(0)));
        }
        System.out.println(letters);

        ArrayList<Integer> ids = new ArrayList<>();
        for (int i = 0; i < code1Split.length / 2; i++) {
            if (code1Split[i].equals(code2Split[i])) {
                ids.add(i % 32);
            }
        }
        System.out.println(ids);

        ArrayList<Integer> fullIds = new ArrayList<>();
        for (int i = code1Split.length / 2; i < code1Split.length; i++) {
            int finalI = i % 32;
            if (ids.stream().anyMatch(id -> id.equals(finalI)) && code1Split[i].equals(code2Split[i])) {
                fullIds.add(i % 32);
            }
        }
        System.out.println(fullIds);

        for (int i = 0; i < code1Split.length; i++) {
            int finalI = i % 32;
            if (i % 16 == 0) {
                System.out.println();
            }
            if (fullIds.stream().anyMatch(id -> id.equals(finalI))) {
                System.out.print(code1Split[i]);
            }
        }
        System.out.println();

        for (int i = 0; i < code1Split.length; i++) {
            int finalI = i % 32;
            if (i % 16 == 0) {
                System.out.println();
            }
            if (fullIds.stream().anyMatch(id -> id.equals(finalI))) {
                System.out.print(code2Split[i]);
            }
        }
        System.out.println();

        for (int i = 0; i < code3Split.length; i++) {
            int finalI = i % 32;
            if (i % 16 == 0) {
                System.out.println();
            }
            if (fullIds.stream().anyMatch(id -> id.equals(finalI))) {
                System.out.print(code3Split[i]);
            }
        }
        System.out.println();

        for (int i = 0; i < code4Split.length; i++) {
            int finalI = i % 32;
            if (i % 16 == 0) {
                System.out.println();
            }
            if (fullIds.stream().anyMatch(id -> id.equals(finalI))) {
                System.out.print(code4Split[i]);
            }
        }
        System.out.println();

    }
}
